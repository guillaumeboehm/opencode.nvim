[
  {
    "type": "message.updated",
    "properties": {
      "info": {
        "id": "msg_a12df6fcc002lSmBoztX2X6eCp",
        "sessionID": "ses_5ed7dd44dffedgI7u51NvRCSB2",
        "role": "assistant",
        "time": {
          "created": 1761253224396,
          "completed": 1761253235862
        },
        "modelID": "claude-sonnet-4.5",
        "providerID": "github-copilot",
        "mode": "build",
        "path": {
          "cwd": "/Users/cam/Dev/neovim-dev/opencode.nvim",
          "root": "/Users/cam/Dev/neovim-dev/opencode.nvim"
        },
        "cost": 0,
        "tokens": {
          "input": 38715,
          "output": 118,
          "reasoning": 0,
          "cache": {
            "read": 38371,
            "write": 0
          }
        }
      }
    }
  },
  {
    "type": "message.part.updated",
    "properties": {
      "part": {
        "id": "prt_a12df7d1c0014QKVdCWKelERSP",
        "sessionID": "ses_5ed7dd44dffedgI7u51NvRCSB2",
        "messageID": "msg_a12df6fcc002lSmBoztX2X6eCp",
        "type": "step-start",
        "snapshot": "308462cc999761f05b75be7e76abb276ebebf77f"
      }
    }
  },
  {
    "type": "message.part.updated",
    "properties": {
      "part": {
        "id": "prt_a12df7d1d0018t8yJZiMfEe5fR",
        "sessionID": "ses_5ed7dd44dffedgI7u51NvRCSB2",
        "messageID": "msg_a12df6fcc002lSmBoztX2X6eCp",
        "type": "tool",
        "callID": "toolu_01XirdBCoNUMUjWuNdPNC2ur",
        "tool": "bash",
        "state": {
          "status": "completed",
          "input": {
            "command": "cd /Users/cam/Dev/neovim-dev/opencode.nvim && ./run_tests.sh",
            "description": "Run all tests to verify refactoring",
            "timeout": 60000
          },
          "output": "\u001b[0;33mRunning tests for opencode.nvim\u001b[0m\n------------------------------------------------\nStarting...Scheduling: ./tests/minimal/plugin_spec.lua\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/minimal/plugin_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.nvim plugin loads the plugin without errors\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.nvim plugin can be set up with custom config\t\n\t\n\u001b[32mSuccess: \u001b[0m\t2\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\u001b[0;32mâœ“ Minimal tests passed\u001b[0m\n------------------------------------------------\nStarting...Scheduling: ./tests/unit/timer_spec.lua\nScheduling: ./tests/unit/server_job_spec.lua\nScheduling: ./tests/unit/config_spec.lua\nScheduling: ./tests/unit/api_spec.lua\nScheduling: ./tests/unit/event_manager_spec.lua\nScheduling: ./tests/unit/init_spec.lua\nScheduling: ./tests/unit/state_spec.lua\nScheduling: ./tests/unit/id_spec.lua\nScheduling: ./tests/unit/api_client_spec.lua\nScheduling: ./tests/unit/context_spec.lua\nScheduling: ./tests/unit/session_spec.lua\nScheduling: ./tests/unit/config_file_spec.lua\nScheduling: ./tests/unit/renderer_spec.lua\nScheduling: ./tests/unit/opencode_server_spec.lua\nScheduling: ./tests/unit/core_spec.lua\nScheduling: ./tests/unit/render_state_spec.lua\nScheduling: ./tests/unit/snapshot_spec.lua\nScheduling: ./tests/unit/keymap_spec.lua\nScheduling: ./tests/unit/util_spec.lua\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/server_job_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tserver_job exposes expected public functions\t\n\u001b[32mSuccess\u001b[0m\t||\tserver_job call_api resolves with decoded json and toggles is_job_running\t\n\u001b[32mSuccess\u001b[0m\t||\tserver_job call_api rejects on non 2xx\t\n\u001b[32mSuccess\u001b[0m\t||\tserver_job stream_api forwards chunks\t\n\u001b[32mSuccess\u001b[0m\t||\tserver_job ensure_server spawns a new opencode server only once\t\n\t\n\u001b[32mSuccess: \u001b[0m\t5\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/util_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tutil.parse_dot_args parses flat booleans\t\n\u001b[32mSuccess\u001b[0m\t||\tutil.parse_dot_args parses nested dot notation\t\n\u001b[32mSuccess\u001b[0m\t||\tutil.parse_dot_args parses mixed nesting and booleans\t\n\u001b[32mSuccess\u001b[0m\t||\tutil.parse_dot_args parses numbers\t\n\u001b[32mSuccess\u001b[0m\t||\tutil.parse_dot_args handles empty string\t\n\t\n\u001b[32mSuccess: \u001b[0m\t5\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/api_client_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tapi_client should create a new client instance\t\n\u001b[32mSuccess\u001b[0m\t||\tapi_client should remove trailing slash from base_url\t\n\u001b[32mSuccess\u001b[0m\t||\tapi_client should create client using create factory function\t\n\u001b[32mSuccess\u001b[0m\t||\tapi_client should have all expected API methods\t\n\u001b[32mSuccess\u001b[0m\t||\tapi_client should construct URLs correctly with query parameters\t\n\t\n\u001b[32mSuccess: \u001b[0m\t5\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/session_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_last_workspace_session returns the most recent session for current workspace\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_last_workspace_session returns nil when no sessions match the workspace\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_last_workspace_session handles JSON parsing errors\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_last_workspace_session handles empty session list\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_by_name returns the session with matching ID\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_by_name returns nil when no session matches the ID\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session read_json_dir returns nil for non-existent directory\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session read_json_dir returns nil when directory exists but has no JSON files\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session read_json_dir returns decoded JSON content from directory\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session read_json_dir skips invalid JSON files\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_messages returns nil when session is nil\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_messages returns nil when messages directory does not exist\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_messages returns messages with their parts\t\n\t\n\u001b[32mSuccess: \u001b[0m\t13\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/config_file_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tconfig_file.setup lazily loads config when accessed\t\n\u001b[32mSuccess\u001b[0m\t||\tconfig_file.setup get_opencode_agents returns primary + defaults\t\n\u001b[32mSuccess\u001b[0m\t||\tconfig_file.setup get_opencode_project returns project\t\n\t\n\u001b[32mSuccess: \u001b[0m\t3\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/api_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.api commands table contains the expected commands with proper structure\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.api setup registers all commands\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.api setup sets up command functions that call the correct core functions\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.api Lua API provides callable functions that match commands\t\n\t\n\u001b[32mSuccess: \u001b[0m\t4\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/id_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tID module should generate ascending session IDs\t\n\u001b[32mSuccess\u001b[0m\t||\tID module should generate descending message IDs\t\n\u001b[32mSuccess\u001b[0m\t||\tID module should validate given IDs correctly\t\n\u001b[32mSuccess\u001b[0m\t||\tID module should throw error for invalid given IDs\t\n\u001b[32mSuccess\u001b[0m\t||\tID module should validate schemas correctly\t\n\u001b[32mSuccess\u001b[0m\t||\tID module should return available prefixes\t\n\u001b[32mSuccess\u001b[0m\t||\tID module should generate IDs with correct length structure\t\n\t\n\u001b[32mSuccess: \u001b[0m\t7\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/render_state_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState new and reset creates a new instance\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState new and reset resets to empty state\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState set_message sets a new message\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState set_message updates line index for message\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState set_message updates existing message\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState set_part sets a new part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState set_part updates line index for part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState set_part initializes actions array\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_part_at_line returns part at line\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_part_at_line returns nil for line without part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_message_at_line returns message at line\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_message_at_line returns nil for line without message\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_part_by_call_id finds part by call ID\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_part_by_call_id returns nil when call ID not found\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState actions adds actions to part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState actions adds actions with offset\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState actions clears actions for part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState actions gets actions at line\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState actions gets all actions from all parts\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState update_part_lines updates part line positions\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState update_part_lines shifts subsequent content when expanding\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState update_part_lines shifts subsequent content when shrinking\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState update_part_lines returns false for non-existent part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState remove_part removes part and shifts subsequent content\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState remove_part clears line index for removed part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState remove_part returns false for non-existent part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState remove_message removes message and shifts subsequent content\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState remove_message clears line index for removed message\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState remove_message returns false for non-existent message\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState remove_message removes unrendered message without shifting\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState shift_all does nothing when delta is 0\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState shift_all shifts content at or after from_line\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState shift_all shifts actions with parts\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState shift_all does not rebuild index when nothing shifted\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState shift_all invalidates index when content shifted\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState shift_all exits early when content found before from_line\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState update_part_data updates part reference\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState update_part_data does nothing for non-existent part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_unrendered_message_ids returns empty list when no unrendered messages\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_unrendered_message_ids returns list of unrendered message IDs\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_unrendered_message_ids returns sorted list of message IDs\t\n\t\n\u001b[32mSuccess: \u001b[0m\t41\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/init_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode has setup function in the public API\t\n\u001b[32mSuccess\u001b[0m\t||\topencode main module can be required without errors\t\n\t\n\u001b[32mSuccess: \u001b[0m\t2\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/snapshot_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tsnapshot.restore runs read-tree and checkout-index and notifies on success\t\n\u001b[32mSuccess\u001b[0m\t||\tsnapshot.restore notifies error if no active session\t\n\u001b[32mSuccess\u001b[0m\t||\tsnapshot.restore notifies error if read-tree fails\t\n\u001b[32mSuccess\u001b[0m\t||\tsnapshot.restore notifies error if checkout-index fails\t\n\t\n\u001b[32mSuccess: \u001b[0m\t4\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/event_manager_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tEventManager should create a new instance\t\n\u001b[32mSuccess\u001b[0m\t||\tEventManager should subscribe and emit events\t\n\u001b[32mSuccess\u001b[0m\t||\tEventManager should handle multiple subscribers\t\n\u001b[32mSuccess\u001b[0m\t||\tEventManager should unsubscribe correctly\t\n\u001b[32mSuccess\u001b[0m\t||\tEventManager should track subscriber count\t\n\u001b[32mSuccess\u001b[0m\t||\tEventManager should list event names\t\n\u001b[32mSuccess\u001b[0m\t||\tEventManager should handle starting and stopping\t\n\u001b[32mSuccess\u001b[0m\t||\tEventManager should not start multiple times\t\n\t\n\u001b[32mSuccess: \u001b[0m\t8\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\nError detected while processing command line:\nopencode command not found - please install and configure opencode before using this plugin\nUnsupported opencode CLI version: opencode 0.4.1. Requires >= 0.4.2\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/core_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core open creates windows if they don't exist\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core open handles new session properly\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core open focuses the appropriate window\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core select_session filters sessions by description and parentID\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core send_message sends a message via api_client\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core send_message creates new session when none active\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core opencode_ok (version checks) returns false when opencode executable is missing\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core opencode_ok (version checks) returns false when version is below required\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core opencode_ok (version checks) returns true when version equals required\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core opencode_ok (version checks) returns true when version is above required\t\n\t\n\u001b[32mSuccess: \u001b[0m\t10\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\nFile not added to context. Could not read.\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/context_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\textract_from_opencode_message extracts prompt, selected_text, and current_file from tags in parts\t\n\u001b[32mSuccess\u001b[0m\t||\textract_from_opencode_message returns nils if message or parts missing\t\n\u001b[32mSuccess\u001b[0m\t||\textract_from_message_legacy extracts legacy tags from text\t\n\u001b[32mSuccess\u001b[0m\t||\textract_legacy_tag extracts content between tags\t\n\u001b[32mSuccess\u001b[0m\t||\textract_legacy_tag returns nil if tag not found\t\n\u001b[32mSuccess\u001b[0m\t||\tformat_message returns a parts array with prompt as first part\t\n\u001b[32mSuccess\u001b[0m\t||\tformat_message includes mentioned_files and subagents\t\n\u001b[32mSuccess\u001b[0m\t||\tdelta_context removes current_file if unchanged\t\n\u001b[32mSuccess\u001b[0m\t||\tdelta_context removes mentioned_subagents if unchanged\t\n\u001b[32mSuccess\u001b[0m\t||\tadd_file/add_selection/add_subagent adds a file if filereadable\t\n\u001b[32mSuccess\u001b[0m\t||\tadd_file/add_selection/add_subagent does not add file if not filereadable\t\n\u001b[32mSuccess\u001b[0m\t||\tadd_file/add_selection/add_subagent adds a selection\t\n\u001b[32mSuccess\u001b[0m\t||\tadd_file/add_selection/add_subagent adds a subagent\t\n\t\n\u001b[32mSuccess: \u001b[0m\t13\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/opencode_server_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.opencode_server creates a new server object\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.opencode_server spawn promise resolves when stdout emits server URL\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.opencode_server shutdown resolves shutdown_promise and clears fields\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.opencode_server calls on_error when stderr is triggered\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.opencode_server calls on_exit and clears fields when process exits\t\n\t\n\u001b[32mSuccess: \u001b[0m\t5\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/config_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.config uses default values when no options are provided\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.config merges user options with defaults\t\n\t\n\u001b[32mSuccess: \u001b[0m\t2\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/keymap_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup sets up keymap with new format configured keys\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup sets up keymap with old format configured keys (normalized)\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup sets up callbacks that execute the correct commands (new format)\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup sets up callbacks that execute the correct commands (old format normalized)\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap normalize_keymap normalizes old format keymap to new format correctly\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap normalize_keymap shows error message for unknown API functions\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap normalize_keymap uses custom description from config_entry\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap normalize_keymap falls back to API description when no custom desc provided\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup_window_keymaps handles unknown API functions with error message\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup_window_keymaps uses custom description for window keymaps\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup_permisson_keymap sets up permission keymaps when there is a current permission\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup_permisson_keymap should delete existing permission keymaps if no current permission exists after being set\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup_permisson_keymap does not set permission keymaps when there is no current permission\t\n\t\n\u001b[32mSuccess: \u001b[0m\t13\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/state_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.state (observable) notifies listeners on key change\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.state (observable) notifies wildcard listeners on any key change\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.state (observable) can unregister listeners\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.state (observable) does not notify if value is unchanged\t\n\t\n\u001b[32mSuccess: \u001b[0m\t4\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/timer_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer.new creates a new timer with required options\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer.new sets repeat_timer to false when explicitly disabled\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer.new stores optional parameters\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:start starts a repeating timer\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:start starts a one-shot timer\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:start passes arguments to on_tick function\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:start stops timer when on_tick returns false\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:start stops timer when on_tick throws an error\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:start stops previous timer before starting new one\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:start throws error when timer creation fails\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:stop stops a running timer\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:stop calls on_stop callback when provided\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:stop does nothing when timer is not running\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:stop handles errors in on_stop callback gracefully\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:is_running returns false when timer is not started\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:is_running returns true when timer is running\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:is_running returns false after timer is stopped\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:is_running returns false after one-shot timer completes\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Integration tests can restart a stopped timer\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Integration tests handles rapid start/stop cycles\t\n\t\n\u001b[32mSuccess: \u001b[0m\t20\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\nTwo pending permissions? existing: per_9efb5b2f3001aqJAFBMiGjFjVZ new: per_9efb5bc2a001j9Bd6bFjLB7hrc\nTwo pending permissions? existing: per_9efb5bc2a001j9Bd6bFjLB7hrc new: per_9efb5d6d1001uwVXQ9dhlBlgfO\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/renderer_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays api-error correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays api-error correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays diff correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays diff correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays mentions-with-ranges correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays mentions-with-ranges correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays message-removal correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays permission-denied correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays permission-denied correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays permission-prompt correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays permission correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays permission correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays planning correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays planning correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays redo-all correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays redo-all correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays redo-once correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays redo-once correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays revert correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays revert correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays selection correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays selection correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays shifting-and-multiple-perms correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays simple-session correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays simple-session correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays tool-invalid correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays tool-invalid correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays updating-text correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays updating-text correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer unrendered messages is_message_unrendered returns true for unrendered message\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer unrendered messages is_message_unrendered returns false for rendered message\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer unrendered messages is_message_unrendered returns false for nil\t\n\u001b[31mFail\u001b[0m\t||\trenderer unrendered messages _remove_message_from_buffer skips unrendered message\t\n            ...ev/neovim-dev/opencode.nvim/tests/unit/renderer_spec.lua:207: Expected objects to not be the same.\n            Passed in:\n            (nil)\n            Did not expect:\n            type nil\n            \n            stack traceback:\n            \t...ev/neovim-dev/opencode.nvim/tests/unit/renderer_spec.lua:207: in function <...ev/neovim-dev/opencode.nvim/tests/unit/renderer_spec.lua:201>\n            \t\n\u001b[32mSuccess\u001b[0m\t||\trenderer unrendered messages _replace_message_in_buffer returns false for unrendered message\t\n\u001b[31mFail\u001b[0m\t||\trenderer unrendered messages _rerender_part skips if parent message is unrendered\t\n            ...ev/neovim-dev/opencode.nvim/tests/unit/renderer_spec.lua:232: Expected objects to be equal.\n            Passed in:\n            (number) 9\n            Expected:\n            (number) 15\n            \n            stack traceback:\n            \t...ev/neovim-dev/opencode.nvim/tests/unit/renderer_spec.lua:232: in function <...ev/neovim-dev/opencode.nvim/tests/unit/renderer_spec.lua:222>\n            \t\n\t\n\u001b[32mSuccess: \u001b[0m\t33\t\n\u001b[31mFailed : \u001b[0m\t2\t\n========================================\t\nTests Failed. Exit: 1\t\n\u001b[0;31mâœ— Unit tests failed\u001b[0m\n------------------------------------------------\n\n\u001b[0;31m======== TEST FAILURES SUMMARY ========\u001b[0m\n\u001b[0;31mFound 2 failing test(s):\u001b[0m\n\n\u001b[0;31mFAILED TEST:\u001b[0m \trenderer unrendered messages _remove_message_from_buffer skips unrendered message\t\n\u001b[0;31mFAILED TEST:\u001b[0m \trenderer unrendered messages _rerender_part skips if parent message is unrendered\t\n",
          "title": "cd /Users/cam/Dev/neovim-dev/opencode.nvim && ./run_tests.sh",
          "metadata": {
            "output": "\u001b[0;33mRunning tests for opencode.nvim\u001b[0m\n------------------------------------------------\nStarting...Scheduling: ./tests/minimal/plugin_spec.lua\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/minimal/plugin_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.nvim plugin loads the plugin without errors\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.nvim plugin can be set up with custom config\t\n\t\n\u001b[32mSuccess: \u001b[0m\t2\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\u001b[0;32mâœ“ Minimal tests passed\u001b[0m\n------------------------------------------------\nStarting...Scheduling: ./tests/unit/timer_spec.lua\nScheduling: ./tests/unit/server_job_spec.lua\nScheduling: ./tests/unit/config_spec.lua\nScheduling: ./tests/unit/api_spec.lua\nScheduling: ./tests/unit/event_manager_spec.lua\nScheduling: ./tests/unit/init_spec.lua\nScheduling: ./tests/unit/state_spec.lua\nScheduling: ./tests/unit/id_spec.lua\nScheduling: ./tests/unit/api_client_spec.lua\nScheduling: ./tests/unit/context_spec.lua\nScheduling: ./tests/unit/session_spec.lua\nScheduling: ./tests/unit/config_file_spec.lua\nScheduling: ./tests/unit/renderer_spec.lua\nScheduling: ./tests/unit/opencode_server_spec.lua\nScheduling: ./tests/unit/core_spec.lua\nScheduling: ./tests/unit/render_state_spec.lua\nScheduling: ./tests/unit/snapshot_spec.lua\nScheduling: ./tests/unit/keymap_spec.lua\nScheduling: ./tests/unit/util_spec.lua\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/server_job_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tserver_job exposes expected public functions\t\n\u001b[32mSuccess\u001b[0m\t||\tserver_job call_api resolves with decoded json and toggles is_job_running\t\n\u001b[32mSuccess\u001b[0m\t||\tserver_job call_api rejects on non 2xx\t\n\u001b[32mSuccess\u001b[0m\t||\tserver_job stream_api forwards chunks\t\n\u001b[32mSuccess\u001b[0m\t||\tserver_job ensure_server spawns a new opencode server only once\t\n\t\n\u001b[32mSuccess: \u001b[0m\t5\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/util_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tutil.parse_dot_args parses flat booleans\t\n\u001b[32mSuccess\u001b[0m\t||\tutil.parse_dot_args parses nested dot notation\t\n\u001b[32mSuccess\u001b[0m\t||\tutil.parse_dot_args parses mixed nesting and booleans\t\n\u001b[32mSuccess\u001b[0m\t||\tutil.parse_dot_args parses numbers\t\n\u001b[32mSuccess\u001b[0m\t||\tutil.parse_dot_args handles empty string\t\n\t\n\u001b[32mSuccess: \u001b[0m\t5\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/api_client_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tapi_client should create a new client instance\t\n\u001b[32mSuccess\u001b[0m\t||\tapi_client should remove trailing slash from base_url\t\n\u001b[32mSuccess\u001b[0m\t||\tapi_client should create client using create factory function\t\n\u001b[32mSuccess\u001b[0m\t||\tapi_client should have all expected API methods\t\n\u001b[32mSuccess\u001b[0m\t||\tapi_client should construct URLs correctly with query parameters\t\n\t\n\u001b[32mSuccess: \u001b[0m\t5\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/session_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_last_workspace_session returns the most recent session for current workspace\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_last_workspace_session returns nil when no sessions match the workspace\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_last_workspace_session handles JSON parsing errors\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_last_workspace_session handles empty session list\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_by_name returns the session with matching ID\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_by_name returns nil when no session matches the ID\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session read_json_dir returns nil for non-existent directory\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session read_json_dir returns nil when directory exists but has no JSON files\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session read_json_dir returns decoded JSON content from directory\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session read_json_dir skips invalid JSON files\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_messages returns nil when session is nil\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_messages returns nil when messages directory does not exist\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.session get_messages returns messages with their parts\t\n\t\n\u001b[32mSuccess: \u001b[0m\t13\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/config_file_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tconfig_file.setup lazily loads config when accessed\t\n\u001b[32mSuccess\u001b[0m\t||\tconfig_file.setup get_opencode_agents returns primary + defaults\t\n\u001b[32mSuccess\u001b[0m\t||\tconfig_file.setup get_opencode_project returns project\t\n\t\n\u001b[32mSuccess: \u001b[0m\t3\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/api_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.api commands table contains the expected commands with proper structure\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.api setup registers all commands\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.api setup sets up command functions that call the correct core functions\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.api Lua API provides callable functions that match commands\t\n\t\n\u001b[32mSuccess: \u001b[0m\t4\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/id_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tID module should generate ascending session IDs\t\n\u001b[32mSuccess\u001b[0m\t||\tID module should generate descending message IDs\t\n\u001b[32mSuccess\u001b[0m\t||\tID module should validate given IDs correctly\t\n\u001b[32mSuccess\u001b[0m\t||\tID module should throw error for invalid given IDs\t\n\u001b[32mSuccess\u001b[0m\t||\tID module should validate schemas correctly\t\n\u001b[32mSuccess\u001b[0m\t||\tID module should return available prefixes\t\n\u001b[32mSuccess\u001b[0m\t||\tID module should generate IDs with correct length structure\t\n\t\n\u001b[32mSuccess: \u001b[0m\t7\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/render_state_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState new and reset creates a new instance\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState new and reset resets to empty state\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState set_message sets a new message\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState set_message updates line index for message\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState set_message updates existing message\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState set_part sets a new part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState set_part updates line index for part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState set_part initializes actions array\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_part_at_line returns part at line\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_part_at_line returns nil for line without part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_message_at_line returns message at line\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_message_at_line returns nil for line without message\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_part_by_call_id finds part by call ID\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_part_by_call_id returns nil when call ID not found\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState actions adds actions to part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState actions adds actions with offset\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState actions clears actions for part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState actions gets actions at line\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState actions gets all actions from all parts\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState update_part_lines updates part line positions\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState update_part_lines shifts subsequent content when expanding\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState update_part_lines shifts subsequent content when shrinking\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState update_part_lines returns false for non-existent part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState remove_part removes part and shifts subsequent content\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState remove_part clears line index for removed part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState remove_part returns false for non-existent part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState remove_message removes message and shifts subsequent content\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState remove_message clears line index for removed message\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState remove_message returns false for non-existent message\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState remove_message removes unrendered message without shifting\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState shift_all does nothing when delta is 0\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState shift_all shifts content at or after from_line\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState shift_all shifts actions with parts\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState shift_all does not rebuild index when nothing shifted\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState shift_all invalidates index when content shifted\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState shift_all exits early when content found before from_line\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState update_part_data updates part reference\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState update_part_data does nothing for non-existent part\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_unrendered_message_ids returns empty list when no unrendered messages\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_unrendered_message_ids returns list of unrendered message IDs\t\n\u001b[32mSuccess\u001b[0m\t||\tRenderState get_unrendered_message_ids returns sorted list of message IDs\t\n\t\n\u001b[32mSuccess: \u001b[0m\t41\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/init_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode has setup function in the public API\t\n\u001b[32mSuccess\u001b[0m\t||\topencode main module can be required without errors\t\n\t\n\u001b[32mSuccess: \u001b[0m\t2\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/snapshot_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tsnapshot.restore runs read-tree and checkout-index and notifies on success\t\n\u001b[32mSuccess\u001b[0m\t||\tsnapshot.restore notifies error if no active session\t\n\u001b[32mSuccess\u001b[0m\t||\tsnapshot.restore notifies error if read-tree fails\t\n\u001b[32mSuccess\u001b[0m\t||\tsnapshot.restore notifies error if checkout-index fails\t\n\t\n\u001b[32mSuccess: \u001b[0m\t4\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/event_manager_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tEventManager should create a new instance\t\n\u001b[32mSuccess\u001b[0m\t||\tEventManager should subscribe and emit events\t\n\u001b[32mSuccess\u001b[0m\t||\tEventManager should handle multiple subscribers\t\n\u001b[32mSuccess\u001b[0m\t||\tEventManager should unsubscribe correctly\t\n\u001b[32mSuccess\u001b[0m\t||\tEventManager should track subscriber count\t\n\u001b[32mSuccess\u001b[0m\t||\tEventManager should list event names\t\n\u001b[32mSuccess\u001b[0m\t||\tEventManager should handle starting and stopping\t\n\u001b[32mSuccess\u001b[0m\t||\tEventManager should not start multiple times\t\n\t\n\u001b[32mSuccess: \u001b[0m\t8\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\nError detected while processing command line:\nopencode command not found - please install and configure opencode before using this plugin\nUnsupported opencode CLI version: opencode 0.4.1. Requires >= 0.4.2\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/core_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core open creates windows if they don't exist\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core open handles new session properly\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core open focuses the appropriate window\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core select_session filters sessions by description and parentID\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core send_message sends a message via api_client\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core send_message creates new session when none active\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core opencode_ok (version checks) returns false when opencode executable is missing\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core opencode_ok (version checks) returns false when version is below required\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core opencode_ok (version checks) returns true when version equals required\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.core opencode_ok (version checks) returns true when version is above required\t\n\t\n\u001b[32mSuccess: \u001b[0m\t10\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\nFile not added to context. Could not read.\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/context_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\textract_from_opencode_message extracts prompt, selected_text, and current_file from tags in parts\t\n\u001b[32mSuccess\u001b[0m\t||\textract_from_opencode_message returns nils if message or parts missing\t\n\u001b[32mSuccess\u001b[0m\t||\textract_from_message_legacy extracts legacy tags from text\t\n\u001b[32mSuccess\u001b[0m\t||\textract_legacy_tag extracts content between tags\t\n\u001b[32mSuccess\u001b[0m\t||\textract_legacy_tag returns nil if tag not found\t\n\u001b[32mSuccess\u001b[0m\t||\tformat_message returns a parts array with prompt as first part\t\n\u001b[32mSuccess\u001b[0m\t||\tformat_message includes mentioned_files and subagents\t\n\u001b[32mSuccess\u001b[0m\t||\tdelta_context removes current_file if unchanged\t\n\u001b[32mSuccess\u001b[0m\t||\tdelta_context removes mentioned_subagents if unchanged\t\n\u001b[32mSuccess\u001b[0m\t||\tadd_file/add_selection/add_subagent adds a file if filereadable\t\n\u001b[32mSuccess\u001b[0m\t||\tadd_file/add_selection/add_subagent does not add file if not filereadable\t\n\u001b[32mSuccess\u001b[0m\t||\tadd_file/add_selection/add_subagent adds a selection\t\n\u001b[32mSuccess\u001b[0m\t||\tadd_file/add_selection/add_subagent adds a subagent\t\n\t\n\u001b[32mSuccess: \u001b[0m\t13\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/opencode_server_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.opencode_server creates a new server object\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.opencode_server spawn promise resolves when stdout emits server URL\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.opencode_server shutdown resolves shutdown_promise and clears fields\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.opencode_server calls on_error when stderr is triggered\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.opencode_server calls on_exit and clears fields when process exits\t\n\t\n\u001b[32mSuccess: \u001b[0m\t5\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/config_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.config uses default values when no options are provided\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.config merges user options with defaults\t\n\t\n\u001b[32mSuccess: \u001b[0m\t2\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/keymap_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup sets up keymap with new format configured keys\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup sets up keymap with old format configured keys (normalized)\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup sets up callbacks that execute the correct commands (new format)\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup sets up callbacks that execute the correct commands (old format normalized)\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap normalize_keymap normalizes old format keymap to new format correctly\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap normalize_keymap shows error message for unknown API functions\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap normalize_keymap uses custom description from config_entry\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap normalize_keymap falls back to API description when no custom desc provided\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup_window_keymaps handles unknown API functions with error message\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup_window_keymaps uses custom description for window keymaps\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup_permisson_keymap sets up permission keymaps when there is a current permission\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup_permisson_keymap should delete existing permission keymaps if no current permission exists after being set\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.keymap setup_permisson_keymap does not set permission keymaps when there is no current permission\t\n\t\n\u001b[32mSuccess: \u001b[0m\t13\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/state_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.state (observable) notifies listeners on key change\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.state (observable) notifies wildcard listeners on any key change\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.state (observable) can unregister listeners\t\n\u001b[32mSuccess\u001b[0m\t||\topencode.state (observable) does not notify if value is unchanged\t\n\t\n\u001b[32mSuccess: \u001b[0m\t4\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/timer_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer.new creates a new timer with required options\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer.new sets repeat_timer to false when explicitly disabled\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer.new stores optional parameters\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:start starts a repeating timer\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:start starts a one-shot timer\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:start passes arguments to on_tick function\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:start stops timer when on_tick returns false\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:start stops timer when on_tick throws an error\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:start stops previous timer before starting new one\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:start throws error when timer creation fails\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:stop stops a running timer\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:stop calls on_stop callback when provided\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:stop does nothing when timer is not running\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:stop handles errors in on_stop callback gracefully\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:is_running returns false when timer is not started\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:is_running returns true when timer is running\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:is_running returns false after timer is stopped\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Timer:is_running returns false after one-shot timer completes\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Integration tests can restart a stopped timer\t\n\u001b[32mSuccess\u001b[0m\t||\tTimer Integration tests handles rapid start/stop cycles\t\n\t\n\u001b[32mSuccess: \u001b[0m\t20\t\n\u001b[31mFailed : \u001b[0m\t0\t\n========================================\t\nTwo pending permissions? existing: per_9efb5b2f3001aqJAFBMiGjFjVZ new: per_9efb5bc2a001j9Bd6bFjLB7hrc\nTwo pending permissions? existing: per_9efb5bc2a001j9Bd6bFjLB7hrc new: per_9efb5d6d1001uwVXQ9dhlBlgfO\n\n========================================\t\nTesting: \t/Users/cam/Dev/neovim-dev/opencode.nvim/tests/unit/renderer_spec.lua\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays api-error correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays api-error correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays diff correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays diff correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays mentions-with-ranges correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays mentions-with-ranges correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays message-removal correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays permission-denied correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays permission-denied correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays permission-prompt correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays permission correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays permission correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays planning correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays planning correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays redo-all correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays redo-all correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays redo-once correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays redo-once correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays revert correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays revert correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays selection correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays selection correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays shifting-and-multiple-perms correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays simple-session correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays simple-session correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays tool-invalid correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays tool-invalid correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays updating-text correctly (event-by-event)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer replays updating-text correctly (session)\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer unrendered messages is_message_unrendered returns true for unrendered message\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer unrendered messages is_message_unrendered returns false for rendered message\t\n\u001b[32mSuccess\u001b[0m\t||\trenderer unrendered messages is_message_unrendered returns false for nil\t\n\u001b[31mFail\u001b[0m\t||\trenderer unrendered messages _remove_message_from_buffer skips unrendered message\t\n            ...ev/neovim-dev/opencode.nvim/tests/unit/renderer_spec.lua:207: Expected objects to not be the same.\n            Passed in:\n            (nil)\n            Did not expect:\n            type nil\n            \n            stack traceback:\n            \t...ev/neovim-dev/opencode.nvim/tests/unit/renderer_spec.lua:207: in function <...ev/neovim-dev/opencode.nvim/tests/unit/renderer_spec.lua:201>\n            \t\n\u001b[32mSuccess\u001b[0m\t||\trenderer unrendered messages _replace_message_in_buffer returns false for unrendered message\t\n\u001b[31mFail\u001b[0m\t||\trenderer unrendered messages _rerender_part skips if parent message is unrendered\t\n            ...ev/neovim-dev/opencode.nvim/tests/unit/renderer_spec.lua:232: Expected objects to be equal.\n            Passed in:\n            (number) 9\n            Expected:\n            (number) 15\n            \n            stack traceback:\n            \t...ev/neovim-dev/opencode.nvim/tests/unit/renderer_spec.lua:232: in function <...ev/neovim-dev/opencode.nvim/tests/unit/renderer_spec.lua:222>\n            \t\n\t\n\u001b[32mSuccess: \u001b[0m\t33\t\n\u001b[31mFailed : \u001b[0m\t2\t\n========================================\t\nTests Failed. Exit: 1\t\n\u001b[0;31mâœ— Unit tests failed\u001b[0m\n------------------------------------------------\n\n\u001b[0;31m======== TEST FAILURES SUMMARY ========\u001b[0m\n\u001b[0;31mFound 2 failing test(s):\u001b[0m\n\n\u001b[0;31mFAILED TEST:\u001b[0m \trenderer unrendered messages _remove_message_from_buffer skips unrendered message\t\n\u001b[0;31mFAILED TEST:\u001b[0m \trenderer unrendered messages _rerender_part skips if parent message is unrendered\t\n",
            "exit": 1,
            "description": "Run all tests to verify refactoring"
          },
          "time": {
            "start": 1761253228673,
            "end": 1761253235820
          }
        }
      }
    }
  },
  {
    "type": "message.part.updated",
    "properties": {
      "part": {
        "id": "prt_a12df9c6d001pNDO9liIhWzBte",
        "sessionID": "ses_5ed7dd44dffedgI7u51NvRCSB2",
        "messageID": "msg_a12df6fcc002lSmBoztX2X6eCp",
        "type": "step-finish",
        "snapshot": "308462cc999761f05b75be7e76abb276ebebf77f",
        "cost": 0,
        "tokens": {
          "input": 38715,
          "output": 118,
          "reasoning": 0,
          "cache": {
            "read": 38371,
            "write": 0
          }
        }
      }
    }
  }
]
